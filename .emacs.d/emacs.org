#+TITLE PZI Emacs Configuration 
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el



* Tips for Use
  In this document I've added links in many places that lead you to documentation for the
  various packages I use. If you're looking at this file in Emacs, you can put your cursor
  on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.
  
* Package Management
  Set up ELPA, MELPA, and Org package repositories and load use-package to manage package configuration.
  #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			      ("elpa" . "https://elpa.gnu.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

     ;; Initialze use-package on non-linux platforms
     ;; https://github.com/jwiegley/use-package
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (require 'use-package)
     (setq use-package-always-ensure t) ; install packages automatically if not already present on the system
  #+end_src
  
* General Configuration
** User Interface
   Clean up Emacs' user interface, make it more minimal
  #+begin_src emacs-lisp
    ;; Disable startup message
    (setq inhibit-startup-message t)
    (scroll-bar-mode -1)   ; Disable visible scrollbar
    (tool-bar-mode -1)     ; Disable the toolba
    (tooltip-mode -1)      ; Disable tooltips
    (set-fringe-mode 10)   ; Give some breathing room
    ;; Keep the menu enabled for now
    ;;(menu-bar-mode -1)     ; Disable the menu bar

    ;; Set up the visible bell
    (setq visible-bell t)

    ;; Enable line numbers globally
    (global-display-line-numbers-mode t)

    ;; Add current column to the modeline
    (column-number-mode)

  #+end_src

* Keyboard Bindings

  Enable CUA mode to use the use =C-x=, =C-c=, =C-v=, and =C-z= to invoke
  commands that cut(kill), copy, paste (yank), and undo respectively.

  https://www.emacswiki.org/emacs/CuaMode
  https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html
  
  #+begin_src emacs-lisp
    (cua-mode t)
  #+end_src
  
* Org Mode
** Org Mode Configuration
   #+begin_src emacs-lisp
        (defun pzi/org-mode-setup ()
          (org-indent-mode)
          (variable-pitch-mode 0)
          (auto-fill-mode 0)
          (visual-line-mode))

        (use-package org
          :ensure t
          :hook
          (org-mode . pzi/org-mode-setup)
          :config
          (setq org-ellipsis " â–¾"))
   #+end_src
** Org Babel
   Execution =C-c C-c= (output, value results)

   [[https://orgmode.org/worg/org-contrib/babel/]]
   [[https://orgmode.org/worg/org-contrib/babel/languages/index.html]]

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)))

     (setq org-confirm-babel-evaluate nil)
   #+end_src
   
** Structure Templates
   The [[https://orgmode.org/manual/Structure-Templates.html#Structure-Templates][Structure Templates]] enable you to type thing like =<el= and then hit =TAB= to expand
   empty structural blocks, such as =#+BEGIN_SRC= ... =#+END_SRC=, or to wrap existing text
   in such a block.

#+BEGIN_SRC emacs-lisp
  ;; This is need as of Org 9.2
  (require 'org-tempo)

  ;; add Structured Templates
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;;(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  ;;(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  ;;(add-to-list 'org-structure-template-alist '("py" . "src python"))
  ;;(add-to-list 'org-structure-template-alist '("go" . "src go"))
  ;;(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  ;;(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+END_SRC


* Unsorted config from initial init.el
#+BEGIN_SRC emacs-lisp
    ;; PZI Emacs Config
    ;; Build with the help of Emacs From Scratch series by System Crafters
    ;; https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ
    ;;
    ;; ...and inspired by several other sources

    ;; * General Configuration
 

    ;; Use Ivy for completions
    (use-package ivy
	:diminish ;(ivy-mode . "")
    ;;  :bind (("C-s" . swiper)
    ;;	 :map ivy-minibuffer-map
    ;;	 ("TAB" . ivy-alt-done)
    ;;	 ("C-l" . ivy-alt-done)
    ;;	 ("C-j" . ivy-next-line)
    ;;	 ("C-k" . ivy-previous-line)
    ;;	 :map ivy-switch-buffer-map
    ;;	 ("C-k" . ivy-previous-line)
    ;;	 ("C-l" . ivy-done)
    ;;	 ("C-d" . ivy-switch-buffer-kill)
    ;;	 :map ivy-reverse-i-search-map
    ;;	 ("C-k" . ivy-previous-line)
    ;;	 ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t  ; Add recent files and bookmarks to the ivy-switch-buffer
	    ivy-count-format "%d/%d " ; Displays the current and total number in the collection in the prompt
	    ivy-wrap t)) ;ivy-next-line and ivy-previous-line will cycle past the last and the first candidates respectively. 

    ;; Use Counsel to override basic Emacs commands 
    (use-package counsel
      :bind
      (("M-x"   . counsel-M-x)
       ("C-s"   . swiper)
       ("C-x C-f" . counsel-find-file)
       ("C-M-j" . counsel-switch-buffer))
      :config
      (setq ivy-initial-inputs-alist nil)) ; Don't start searches with ^

    ;; Use ivy-rich to add some information to ivy buffers
    ;; https://github.com/Yevgnen/ivy-rich
    (use-package ivy-rich
      :after ivy
      :init
      (ivy-rich-mode 1))





    ;; Disable line numbers for some modes
    ;;(dolist (mode '(org-mode-hook
    ;;                term-mode-hook
    ;;                shell-mode-hook
    ;;                treemacs-mode-hook
    ;;                eshell-mode-hook))
    ;;;  (add-hook mode (lambda () (display-line-numbers-mode 0))))





    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    ;; all-the-icons is required for doom-modeline to show beautiful icons
    (use-package all-the-icons)

    ;; first time you need to run
    ;; M-x all-the-icons-install-font
    ;; On Windows 10 it is necessary to install the fonts manually afterwards
    ;; https://www.hackercitizen.com/emacs-for-windows-10-install-all-the-icons/
    ;; https://github.com/domtronn/all-the-icons.el

    ;; Use doom-modeline for a more minimal experience
    ;; https://github.com/seagle0128/doom-modeline
    (use-package doom-modeline
      :init
      (doom-modeline-mode 1))

    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

    ;; which-key
    ;; https://github.com/justbur/emacs-which-key
    (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (which-key-mode)
      (setq which-key-idle-delay 0.5))

    ;; ** Font
    ;; *** Set the font
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 110)

    ;; ** Theme
    ;; *** Set a theme
    ;;(load-theme 'wombat)

    ;; Doom Themes
    ;; https://github.com/hlissner/emacs-doom-themes
    (use-package doom-themes
      :config
      (load-theme 'doom-city-lights t)
      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Corrects (and improves) org-mode's native fontification
      (doom-themes-org-config))
#+END_SRC
